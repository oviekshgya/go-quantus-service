// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\engine\service\service.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\engine\service\service.go -destination=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\test\mocks\mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "go-quantus-service/src/entities"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(c *gin.Context, id int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", c, id)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), c, id)
}

// LoginUser mocks base method.
func (m *MockUserService) LoginUser(c *gin.Context, req *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", c, req)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceMockRecorder) LoginUser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserService)(nil).LoginUser), c, req)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(c *gin.Context, req *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", c, req)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), c, req)
}

// UpdateUSser mocks base method.
func (m *MockUserService) UpdateUSser(c *gin.Context, req *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUSser", c, req)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUSser indicates an expected call of UpdateUSser.
func (mr *MockUserServiceMockRecorder) UpdateUSser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUSser", reflect.TypeOf((*MockUserService)(nil).UpdateUSser), c, req)
}

// UserDetail mocks base method.
func (m *MockUserService) UserDetail(c *gin.Context, id int64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetail", c, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetail indicates an expected call of UserDetail.
func (mr *MockUserServiceMockRecorder) UserDetail(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetail", reflect.TypeOf((*MockUserService)(nil).UserDetail), c, id)
}

// MockContentSerivce is a mock of ContentSerivce interface.
type MockContentSerivce struct {
	ctrl     *gomock.Controller
	recorder *MockContentSerivceMockRecorder
	isgomock struct{}
}

// MockContentSerivceMockRecorder is the mock recorder for MockContentSerivce.
type MockContentSerivceMockRecorder struct {
	mock *MockContentSerivce
}

// NewMockContentSerivce creates a new mock instance.
func NewMockContentSerivce(ctrl *gomock.Controller) *MockContentSerivce {
	mock := &MockContentSerivce{ctrl: ctrl}
	mock.recorder = &MockContentSerivceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentSerivce) EXPECT() *MockContentSerivceMockRecorder {
	return m.recorder
}

// DeleteContent mocks base method.
func (m *MockContentSerivce) DeleteContent(c *gin.Context, id int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", c, id)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContent indicates an expected call of DeleteContent.
func (mr *MockContentSerivceMockRecorder) DeleteContent(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockContentSerivce)(nil).DeleteContent), c, id)
}

// GetAllContents mocks base method.
func (m *MockContentSerivce) GetAllContents(c *gin.Context, id int64) ([]entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContents", c, id)
	ret0, _ := ret[0].([]entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContents indicates an expected call of GetAllContents.
func (mr *MockContentSerivceMockRecorder) GetAllContents(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContents", reflect.TypeOf((*MockContentSerivce)(nil).GetAllContents), c, id)
}

// GetContentByID mocks base method.
func (m *MockContentSerivce) GetContentByID(c *gin.Context, id int64) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", c, id)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockContentSerivceMockRecorder) GetContentByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockContentSerivce)(nil).GetContentByID), c, id)
}

// HandleContentUpdateOrDelete mocks base method.
func (m *MockContentSerivce) HandleContentUpdateOrDelete(c *gin.Context, content *entities.Content) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleContentUpdateOrDelete", c, content)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleContentUpdateOrDelete indicates an expected call of HandleContentUpdateOrDelete.
func (mr *MockContentSerivceMockRecorder) HandleContentUpdateOrDelete(c, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleContentUpdateOrDelete", reflect.TypeOf((*MockContentSerivce)(nil).HandleContentUpdateOrDelete), c, content)
}

// RegisterContent mocks base method.
func (m *MockContentSerivce) RegisterContent(c *gin.Context, req *entities.Content) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterContent", c, req)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterContent indicates an expected call of RegisterContent.
func (mr *MockContentSerivceMockRecorder) RegisterContent(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterContent", reflect.TypeOf((*MockContentSerivce)(nil).RegisterContent), c, req)
}

// UpdateContent mocks base method.
func (m *MockContentSerivce) UpdateContent(c *gin.Context, req *entities.Content) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", c, req)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockContentSerivceMockRecorder) UpdateContent(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockContentSerivce)(nil).UpdateContent), c, req)
}
