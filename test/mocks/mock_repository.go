// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\src\repository\repository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\src\repository\repository.go -destination=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\test\mocks\mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "go-quantus-service/src/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepositoryUser is a mock of RepositoryUser interface.
type MockRepositoryUser struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryUserMockRecorder
	isgomock struct{}
}

// MockRepositoryUserMockRecorder is the mock recorder for MockRepositoryUser.
type MockRepositoryUserMockRecorder struct {
	mock *MockRepositoryUser
}

// NewMockRepositoryUser creates a new mock instance.
func NewMockRepositoryUser(ctrl *gomock.Controller) *MockRepositoryUser {
	mock := &MockRepositoryUser{ctrl: ctrl}
	mock.recorder = &MockRepositoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryUser) EXPECT() *MockRepositoryUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepositoryUser) CreateUser(tx *gorm.DB, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryUserMockRecorder) CreateUser(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryUser)(nil).CreateUser), tx, user)
}

// DeleteUser mocks base method.
func (m *MockRepositoryUser) DeleteUser(tx *gorm.DB, idUser int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", tx, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryUserMockRecorder) DeleteUser(tx, idUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepositoryUser)(nil).DeleteUser), tx, idUser)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryUser) GetUserByEmail(tx *gorm.DB, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", tx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryUserMockRecorder) GetUserByEmail(tx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryUser)(nil).GetUserByEmail), tx, email)
}

// GetUserByID mocks base method.
func (m *MockRepositoryUser) GetUserByID(tx *gorm.DB, id int64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", tx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryUserMockRecorder) GetUserByID(tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepositoryUser)(nil).GetUserByID), tx, id)
}

// ListUser mocks base method.
func (m *MockRepositoryUser) ListUser(tx *gorm.DB) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", tx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockRepositoryUserMockRecorder) ListUser(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockRepositoryUser)(nil).ListUser), tx)
}

// UpdateUser mocks base method.
func (m *MockRepositoryUser) UpdateUser(tx *gorm.DB, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryUserMockRecorder) UpdateUser(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryUser)(nil).UpdateUser), tx, user)
}

// MockRepositoryContent is a mock of RepositoryContent interface.
type MockRepositoryContent struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryContentMockRecorder
	isgomock struct{}
}

// MockRepositoryContentMockRecorder is the mock recorder for MockRepositoryContent.
type MockRepositoryContentMockRecorder struct {
	mock *MockRepositoryContent
}

// NewMockRepositoryContent creates a new mock instance.
func NewMockRepositoryContent(ctrl *gomock.Controller) *MockRepositoryContent {
	mock := &MockRepositoryContent{ctrl: ctrl}
	mock.recorder = &MockRepositoryContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryContent) EXPECT() *MockRepositoryContentMockRecorder {
	return m.recorder
}

// CreateContent mocks base method.
func (m *MockRepositoryContent) CreateContent(tx *gorm.DB, content *entities.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", tx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockRepositoryContentMockRecorder) CreateContent(tx, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockRepositoryContent)(nil).CreateContent), tx, content)
}

// DeleteContent mocks base method.
func (m *MockRepositoryContent) DeleteContent(tx *gorm.DB, contentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", tx, contentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContent indicates an expected call of DeleteContent.
func (mr *MockRepositoryContentMockRecorder) DeleteContent(tx, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockRepositoryContent)(nil).DeleteContent), tx, contentID)
}

// GetContentByID mocks base method.
func (m *MockRepositoryContent) GetContentByID(tx *gorm.DB, contentID int64) (*entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", tx, contentID)
	ret0, _ := ret[0].(*entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockRepositoryContentMockRecorder) GetContentByID(tx, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockRepositoryContent)(nil).GetContentByID), tx, contentID)
}

// ListContentByUserID mocks base method.
func (m *MockRepositoryContent) ListContentByUserID(tx *gorm.DB, userID int64) ([]entities.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentByUserID", tx, userID)
	ret0, _ := ret[0].([]entities.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContentByUserID indicates an expected call of ListContentByUserID.
func (mr *MockRepositoryContentMockRecorder) ListContentByUserID(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentByUserID", reflect.TypeOf((*MockRepositoryContent)(nil).ListContentByUserID), tx, userID)
}

// UpdateContent mocks base method.
func (m *MockRepositoryContent) UpdateContent(tx *gorm.DB, content *entities.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", tx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockRepositoryContentMockRecorder) UpdateContent(tx, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockRepositoryContent)(nil).UpdateContent), tx, content)
}
