// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\engine\controller\controller.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\engine\controller\controller.go -destination=C:\Users\oviek.ghinulur\go\src\any\go-quantus-service\test\mocks\mock_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
	isgomock struct{}
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// DeleteUserController mocks base method.
func (m *MockUserController) DeleteUserController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUserController", c)
}

// DeleteUserController indicates an expected call of DeleteUserController.
func (mr *MockUserControllerMockRecorder) DeleteUserController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserController", reflect.TypeOf((*MockUserController)(nil).DeleteUserController), c)
}

// LoginUserController mocks base method.
func (m *MockUserController) LoginUserController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginUserController", c)
}

// LoginUserController indicates an expected call of LoginUserController.
func (mr *MockUserControllerMockRecorder) LoginUserController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserController", reflect.TypeOf((*MockUserController)(nil).LoginUserController), c)
}

// RegisterUserController mocks base method.
func (m *MockUserController) RegisterUserController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUserController", c)
}

// RegisterUserController indicates an expected call of RegisterUserController.
func (mr *MockUserControllerMockRecorder) RegisterUserController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserController", reflect.TypeOf((*MockUserController)(nil).RegisterUserController), c)
}

// UpdateUserController mocks base method.
func (m *MockUserController) UpdateUserController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserController", c)
}

// UpdateUserController indicates an expected call of UpdateUserController.
func (mr *MockUserControllerMockRecorder) UpdateUserController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserController", reflect.TypeOf((*MockUserController)(nil).UpdateUserController), c)
}

// UserDetailByIDController mocks base method.
func (m *MockUserController) UserDetailByIDController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserDetailByIDController", c)
}

// UserDetailByIDController indicates an expected call of UserDetailByIDController.
func (mr *MockUserControllerMockRecorder) UserDetailByIDController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetailByIDController", reflect.TypeOf((*MockUserController)(nil).UserDetailByIDController), c)
}

// UserDetailController mocks base method.
func (m *MockUserController) UserDetailController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserDetailController", c)
}

// UserDetailController indicates an expected call of UserDetailController.
func (mr *MockUserControllerMockRecorder) UserDetailController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetailController", reflect.TypeOf((*MockUserController)(nil).UserDetailController), c)
}

// MockContentController is a mock of ContentController interface.
type MockContentController struct {
	ctrl     *gomock.Controller
	recorder *MockContentControllerMockRecorder
	isgomock struct{}
}

// MockContentControllerMockRecorder is the mock recorder for MockContentController.
type MockContentControllerMockRecorder struct {
	mock *MockContentController
}

// NewMockContentController creates a new mock instance.
func NewMockContentController(ctrl *gomock.Controller) *MockContentController {
	mock := &MockContentController{ctrl: ctrl}
	mock.recorder = &MockContentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentController) EXPECT() *MockContentControllerMockRecorder {
	return m.recorder
}

// DeleteContentController mocks base method.
func (m *MockContentController) DeleteContentController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteContentController", c)
}

// DeleteContentController indicates an expected call of DeleteContentController.
func (mr *MockContentControllerMockRecorder) DeleteContentController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentController", reflect.TypeOf((*MockContentController)(nil).DeleteContentController), c)
}

// GetAllContentsController mocks base method.
func (m *MockContentController) GetAllContentsController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllContentsController", c)
}

// GetAllContentsController indicates an expected call of GetAllContentsController.
func (mr *MockContentControllerMockRecorder) GetAllContentsController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContentsController", reflect.TypeOf((*MockContentController)(nil).GetAllContentsController), c)
}

// GetContentByIDController mocks base method.
func (m *MockContentController) GetContentByIDController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetContentByIDController", c)
}

// GetContentByIDController indicates an expected call of GetContentByIDController.
func (mr *MockContentControllerMockRecorder) GetContentByIDController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByIDController", reflect.TypeOf((*MockContentController)(nil).GetContentByIDController), c)
}

// RegisterContentController mocks base method.
func (m *MockContentController) RegisterContentController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterContentController", c)
}

// RegisterContentController indicates an expected call of RegisterContentController.
func (mr *MockContentControllerMockRecorder) RegisterContentController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterContentController", reflect.TypeOf((*MockContentController)(nil).RegisterContentController), c)
}

// UpdateContentController mocks base method.
func (m *MockContentController) UpdateContentController(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateContentController", c)
}

// UpdateContentController indicates an expected call of UpdateContentController.
func (mr *MockContentControllerMockRecorder) UpdateContentController(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentController", reflect.TypeOf((*MockContentController)(nil).UpdateContentController), c)
}

// UpdateOrDeleteContentController mocks base method.
func (m *MockContentController) UpdateOrDeleteContentController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOrDeleteContentController", ctx)
}

// UpdateOrDeleteContentController indicates an expected call of UpdateOrDeleteContentController.
func (mr *MockContentControllerMockRecorder) UpdateOrDeleteContentController(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrDeleteContentController", reflect.TypeOf((*MockContentController)(nil).UpdateOrDeleteContentController), ctx)
}
